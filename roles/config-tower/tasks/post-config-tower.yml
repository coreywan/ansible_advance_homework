---
- name: Create Homework Assignment project
  tower_project:
    name: "{{ proj_name }}"
    scm_branch: "{{ scm_branch }}"
    scm_url: "{{ scm_url }}"
    state: present
    scm_type: git
    organization: "{{ org_name }}"
    tower_host: "tower1.{{ tower_GUID }}.example.opentlc.com"
    tower_username: "{{ user_name }}"
    tower_password: "{{ password }}"
  register: tower_project_info

- name: Update Tower Project
  when: not tower_project_info.changed
  block:
    - name: Launch Update
      uri:
        url: "https://tower1.{{ tower_GUID }}.example.opentlc.com/api/v2/projects/{{ tower_project_info.id }}/update/"
        method: POST
        user: "{{ user_name }}"
        password: "{{ password }}"
        status_code: [202]
        force_basic_auth: true
        validate_certs: false
      register: tower_project_update

    - name: Wait for Update to Complete
      uri:
        url: "https://tower1.{{ tower_GUID }}.example.opentlc.com/api/v2/project_updates/{{ tower_project_update.json.id }}/"
        method: GET
        user: "{{ user_name }}"
        password: "{{ password }}"
        status_code: [200]
        force_basic_auth: true
        validate_certs: false
      register: tower_project_update_status
      until: tower_project_update_status.json.status == 'successful'
      retries: 12
      delay: 5

- name: Remove comments from openstack.pem file
  replace: 
    path: /root/.ssh/openstack.pem
    regexp: '^#.*$'
    backup: true

- name: Machine Credential to connect to workstation using openstack.pub
  tower_credential:
    name: Connect_to_workstation
    state: present
    kind: ssh
    organization: "{{ org_name }}"
    tower_host: "tower1.{{ tower_GUID }}.example.opentlc.com"
    tower_username: "{{ user_name }}"
    tower_password: "{{ password }}"
    ssh_key_data: /root/.ssh/openstack.pem
    username: cloud-user

- name: Create Inventory
  tower_inventory:
    organization: "{{ org_name }}"
    tower_host: "tower1.{{ tower_GUID }}.example.opentlc.com"
    tower_username: "{{ user_name }}"
    tower_password: "{{ password }}"
    name: "{{ inv.name }}"
    description: "{{ inv.description | default(omit) }}"
  loop: "{{ tower_inventories }}"
  loop_control:
    loop_var: inv
    label: "{{ inv.name }}"

- name: Create Inventory Source
  tower_inventory_source:
    tower_host: "tower1.{{ tower_GUID }}.example.opentlc.com"
    tower_username: "{{ user_name }}"
    tower_password: "{{ password }}"
    name: "{{ inv_src.1.name }}"
    inventory: "{{ inv_src.0.name }}"
    description: "{{ inv_src.1.description | default(omit) }}"
    credential: "{{ inv_src.1.credential | default(omit) }}"
    group_by: "{{ inv_src.1.group_by | default(omit) }}"
    overwrite: "{{ inv_src.1.overwrite | default(omit) }}"
    overwrite_vars: "{{ inv_src.1.overwrite_vars | default(omit) }}"
    source: "{{ inv_src.1.source }}"
    source_path: "{{ inv_src.1.source_path | default(omit) }}"
    source_project: "{{ inv_src.1.source_project | default(omit) }}"
    source_regions: "{{ inv_src.1.source_regions | default(omit) }}"
    source_script: "{{ inv_src.1.source_script | default(omit) }}"
    source_vars: "{{ inv_src.1.source_vars | default(omit) }}"
    update_on_launch: "{{ inv_src.1.update_on_launch | default(omit) }}"
    update_on_project_update: "{{ inv_src.1.update_on_project_update | default(omit) }}"
  loop: "{{ tower_inventories | subelements('sources', skip_missing=True) }}"
  loop_control:
    loop_var: inv_src
    label: "{{ inv_src.0.name }}:{{ inv_src.1.name }}"
  register: inventory_sources

- name: Update Each Inventory Sources
  uri:
    url: "https://tower1.{{ tower_GUID }}.example.opentlc.com/api/v2/inventory_sources/{{ inv_src.id }}/update/"
    method: POST
    user: "{{ user_name }}"
    password: "{{ password }}"
    status_code: [202]
    force_basic_auth: true
    validate_certs: false
  loop: "{{ inventory_sources.results }}"
  loop_control:
    loop_var: inv_src
    label: "{{ inv_src.id }}"

- name: Create Group in static inventory
  tower_group:
    tower_host: "tower1.{{ tower_GUID }}.example.opentlc.com"
    tower_username: "{{ user_name }}"
    tower_password: "{{ password }}"
    inventory: "{{ static_inventory_name }}"
    name: "{{ group_name }}"

- name: Add workstation host in tower_inventory
  tower_host:
    tower_host: "tower1.{{ tower_GUID }}.example.opentlc.com"
    tower_username: "{{ user_name }}"
    tower_password: "{{ password }}"
    inventory: "{{ static_inventory_name }}"
    name: "{{ host_name }}"

- name: Associate workstation host to group
  command: |
    tower-cli host associate --host "{{ host_name }}" --group "{{ group_name }}"

- name: Tower Creds key file
  tower_credential:
    name: "{{ opentlc_cred_name }}"
    organization: Default
    state: present
    kind: ssh
    tower_host: tower1.{{tower_GUID}}.example.opentlc.com
    tower_username: admin
    tower_password: r3dh4t1!
    tower_verify_ssl: false
    ssh_key_data: "{{ path_to_opentlc_key }}"
    username: "{{ opentlc_login }}"

- name: Remove secret
  file:
    name: /root/secret.pem
    state: absent
